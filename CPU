#include <stdio.h>
#include <malloc.h>
#include < string.h >
#pragma warning(disable : 4996)

int find_determinator(int dim, int* arr)
{
    if (dim == 1)
        return *arr;
    if (dim == 2)
        return (*arr) * (*(arr + 3)) - (*(arr + 1)) * (*(arr + 2));
    int result = 0;
    int* arr2 = (int*)malloc((dim - 1) * (dim - 1) * sizeof(int));
    for (int i = 0; i < dim; i++)
    {
        // 1-й столбец, i-я строка
        for (int y = 0; y < dim; y++)
            if (y != i)
                for (int x = 1; x < dim; x++)
                {
                    *(arr2 + (y > i ? y - 1 : y) * (dim - 1) + (x - 1)) = *(arr + y * (dim)+x);
                }
        result += *(arr + i * (dim)) * (i & 1 ? -1 : 1) * find_determinator(dim - 1, arr2);
    }
    free(arr2);
    return result;
}
int find_determinator_2(int dim, int* arr)
{
    if (dim == 1)
        return *arr; // a[0][0] = a11
    if (dim == 2)
        return (*arr + 0) * (*(arr + 3)) - (*(arr + 1)) * (*(arr + 2)); // a11*a22-a12*a21 = a[0][0] * a[1][1] - a[0][1] * a[1][0]
    int result = 0;
    int* arr2 = (int*)malloc((dim - 1) * (dim - 1) * sizeof(int));
    /*
        -> det
        ============= EBP-1
        |arr2       |
        |           |
        |call det   | ->
        |           |
        |ret EIP-0  |
        =============

        ->
        ============= EBP-2
        |arr2       |
        |           |
        |call det   | ->
        |           |
        |ret EIP-1  |
        =============
    */
    for (int i = 0; i < dim; i++) // зачеркнутая строка
    {
        for (int y = 0; y < dim; y++)
            if (y != i)
                for (int x = 1; x < dim; x++)
                {
                    // *(arr2 + (y > i ? y - 1 : y) * (dim - 1) + (x - 1)) = *(arr + y * (dim) + x);
                    // arr2[(y > i ? y - 1 : y) * (dim - 1) + (x - 1)] = arr[y * (dim) + x];
                    // arr2[(y > i ? y - 1 : y)][x-1] = arr[y][x];
                    // if(y>i)
                    //     arr2[y-1][x-1] = arr[y][x];
                    // else
                    //     arr2[y][x-1] = arr[y][x];
                    /*
                    2 2 1       2-2-1
                                |
                    1 5 3 ->    1 5 3
                                |
                    5 2 6       5 2 6

                    arr2 =  | 5 3 |
                            | 2 6 |

                    (1,1) -> (0,0)
                    (1,2) -> (0,1)

                    2 2 1       2 2 1
                                |
                    1 5 3 ->    1-5-3
                                |
                    5 2 6       5 2 6

                    arr2 =  | 2 1 |
                            | 2 6 |

                    y < i
                    (0,1) -> (0,0)
                    (0,2) -> (0,1)
                    y > i
                    (2,1) -> (1,0)
                    (2,2) -> (1,1)
                    */
                }
        result += *(arr + i * (dim)) * (i & 1 ? -1 : 1) * find_determinator(dim - 1, arr2);
        // result += arr[i][0] * (i & 1 ? -1 : 1) * find_determinator(dim - 1, arr2);
        // 1-й столбец, i-я строка
        // if(i % 2 == 1)
        //     result -= arr[i][0] * find_determinator(dim - 1, arr2);
        // else
        //     result += arr[i][0] * find_determinator(dim - 1, arr2);
        /*

        i є (1, n)
        (1 + i) % 2 == 0 => * 1
        (1 + i) % 2 == 1 => * -1
        i % 2 == 0 => * -1
        i % 2 == 1 => * 1

        i є (0, n-1)
        (1 + i) % 2 == 0 => * -1
        (1 + i) % 2 == 1 => * 1
        i % 2 == 0 => * 1
        i % 2 == 1 => * -1
        */
    }
    free(arr2);
    return result;
}

int AB(int* A, int* B, int x, int n) {// switch 
    int j = 0;
   
    for (int i = x; i < n * n && j < n; ) {
        A[i] = B[j]; 
        j++; i = x + n;
    }
    return A;
}
int kramer(int *A, int *B, int n) {
    double* X = (double*)calloc(n, sizeof(double));
    int* det = (int*)calloc(n, sizeof(int));
    int flag = find_determinator(n, A);
    
    if (flag != 0) {
        int* lzeA = (int*)calloc(n * n , sizeof(int));
        
        for (int i = 0; i < n; i++) {
            int n2 = n * n;
            memcpy(lzeA, A, n2*sizeof(int));
            lzeA = AB(lzeA, B, i, n);
            det[i] = find_determinator(n, lzeA);
            memcpy(lzeA, A, n * n);
        }
       
        for (int i = 0; i < n; i++) {
            X[i] = ((double)det[i]) /((double) flag);
        }
        
        printf("The answer is:\n");
        for (int i = 0; i < n; i++) {
            printf("%f\t\n", X[i]);
        }
       
        return 1;
    }
  
    else {
        printf("The determinant is 0 :(");
        return 0;
    }
}

int main(int argc, char* argv[])
{
    int n = 0;
    scanf("%d", &n);
    
    int symbol, flag = 0; int enter = 0;
    int* B = (int*)calloc(n , sizeof(int));
    int* A = (int*)calloc(n * n , sizeof(int));
    
    srand(time(NULL));
    
    for (int i = 0; i < n * n; i++)
    {
       A[i] = rand() % 100 - 50;
    }
    for (int i = 0; i < n; i++)
    {
        B[i] = rand() % 100 - 50;
    }
    
    printf("\nA:\n");
    for (int i = 0; i < n * n; i++)
    {
        enter++;
        printf("%d\t",A[i]);
        if (enter == n) {
            enter = 0; 
            printf("\n");
        }
        
    }
    
    printf("\nB:\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d\n", B[i]);
    }
    
    printf("\n\n");
    kramer(A, B, n);
    free(A);
}
